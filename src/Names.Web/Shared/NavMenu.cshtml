@using Microsoft.AspNetCore.Blazor.Browser.Interop
@using Names.Domain.Entities
@using Names.Web
@inject HttpClient Http
@inject Names.Web.EventHandlers.ProvinceChangeHandler ProvinceChangeHandler

<h1>Cien años de nombres</h1>

<p>Pincha en un nombre para ver su evolución</p>

@if (names == null)
{
    <div class="preloader">
        <div class="preloader__container">
            <i class="preloader__element"></i>
            <i class="preloader__element"></i>
        </div>
    </div>
}
else
{
    <div class="tagcloud">
        <div>
            @foreach (var name in names)
            {
                <a href="#" onclick="@(() => ToggleName(name))" style="@name.Style" class="@name.Class">@name.Value</a>
            }
        </div>
    </div>
}

@functions {
    public TagName[] names;

    protected override async Task OnInitAsync()
    {
        await GetAll();
        ProvinceChangeHandler.ProvinceChanged += new EventHandler<int>(this.OnProvinceChanged);
    }

    public void ToggleName(TagName name)
    {
        if (name.IsClicked)
        {
            name.IsClicked = false;
            RemoveName(name);
        }
        else
        {
            name.IsClicked = true;
            AddName(name);
        }
    }

    private async void OnProvinceChanged(object sender, int provinceId)
    {
        names = null;
        this.StateHasChanged();

        if (provinceId > 0)
        {
            await GetByProvince(provinceId);
        }
        else
        {
            await GetAll();
        }
        this.StateHasChanged();
    }

    private async Task GetAll()
    {
        names = await Http.GetJsonAsync<TagName[]>(Config.BaseUrl + "/api/names");
    }

    private async Task GetByProvince(int provinceId)
    {
        names = await Http.GetJsonAsync<TagName[]>(Config.BaseUrl + "/api/names/" + provinceId.ToString());
    }

    private async void AddName(TagName name)
    {
        var quantities = await Http.GetJsonAsync<Quantity[]>(Config.BaseUrl + "/api/quantities/" + name.Id);

        int[] data = new int[10];

        for (var i = 0; i < 10; i++)
        {
            var quantity = Array.Find(quantities, q => q.Year == i + 1);
            data[i] = quantity != null ? quantity.Total : 0;
        }

        AddDataset(name.Id, name.Value, data);
    }

    private void RemoveName(TagName name)
    {
        RemoveDataset(name.Id);
    }

    private void AddDataset(int id, string name, int[] data)
    {
        RegisteredFunction.Invoke<bool>("addDataset", id, name, data);
    }

    private void RemoveDataset(int id)
    {
        RegisteredFunction.Invoke<bool>("removeDataset", id);
    }

    public class TagName : Name
    {
        public bool IsClicked { get; set; }
        public string Class
        {
            get
            {
                var classes = Gender ? "tag female" : "tag male";
                if (IsClicked)
                {
                    classes = classes + " active";
                }

                return classes;
            }
        }

        public string Style
        {
            get
            {
                return $"font-size:{Size}px";
            }
        }

        public double Size
        {
            get
            {
                const int fontMin = 10;
                const int fontMax = 42;
                const int max = 500000;
                const int min = 5000;

                if (Total <= min)
                {
                    return fontMin;
                }

                if (Total >= max)
                {
                    return fontMax;
                }

                return ((double)Total / (double)max) * (fontMax - fontMin) + fontMin;
            }
        }
    }
}
