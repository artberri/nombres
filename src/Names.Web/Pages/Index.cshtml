@page "/"
@inject HttpClient Http
@inject Names.Web.EventHandlers.ChartStatusHandler ChartStatusHandler
@using Microsoft.JSInterop
@using Names.Domain.Entities
@using Names.Web.Enums

<div class="header">
    <div class="flex">
        <ProvinceSelector />
    </div>
    <ChartSelector />
    <div>
        <div class="addthis_inline_share_toolbox"></div>
    </div>
</div>

<div class="chart-container">
    @if (status == ChartStatusType.Empty)
    {
        <div class="chart-message">
            Selecciona algún nombre del listado
        </div>
    }

    <canvas class="chart" id="canvas"></canvas>
</div>

<div>
    <div class="footer">
        <div>
            <p>Datos procedentes de la Estadística del Padrón Continuo a fecha 01/01/2016</p>
            <p><a href="http://www.ine.es/tnombres/formGeneral.do?vista=1">Fuente de datos: Sitio web del INE (www.ine.es)</a></p>
            <p><a href="https://dataaddict.fr/prenoms/">Basado en un proyecto de Data Addict</a></p>
        </div>
        <div class="right">
            <p><a href="https://en.wiktionary.org/wiki/pet_project">Pet Project</a> experimental creado con <a href="https://blazor.net">Blazor</a></p>
            <p>Código fuente disponible en <a href="https://github.com/artberri/nombres">Github</a></p>
            <p>Desarrollado por <a href="https://www.berriart.com/">Alberto Varela</a> con cariño y cerveza</p>
        </div>
    </div>
</div>

@functions {
protected ChartStatusType status = ChartStatusType.Empty;

protected override void OnInit()
{
    ChartStatusHandler.ChartStatusChanged += new EventHandler<ChartStatusType>(this.OnChartStatusChanged);
}

protected override void OnAfterRender()
{
    RenderChart();
}

protected void RenderChart()
{
    JSRuntime.Current.InvokeAsync<bool>(
        "chartFunctions.renderChart");
}

protected void OnChartStatusChanged(object sender, ChartStatusType chartStatus)
{
    status = chartStatus;
    this.StateHasChanged();
}
}
